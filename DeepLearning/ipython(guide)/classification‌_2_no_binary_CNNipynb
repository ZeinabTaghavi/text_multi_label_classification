{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"classification‌_2_no_binary_CNNipynb","provenance":[{"file_id":"13NicNTDwerqE8tlbE7iTAEAsBIPdEZbm","timestamp":1608297413509}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.1"}},"cells":[{"cell_type":"code","metadata":{"id":"QmY-dTGAAXEk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953386190,"user_tz":-210,"elapsed":1333,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"c779f173-29c6-427c-8b9c-985f7104d96e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jajq2iOXA-2q","executionInfo":{"status":"ok","timestamp":1608953388541,"user_tz":-210,"elapsed":3497,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["import os\n","os.chdir('/content/drive/MyDrive/sharif/DeepLearning/ipython(guide)')"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"KWHVC9OB6b3E","executionInfo":{"status":"ok","timestamp":1608953393088,"user_tz":-210,"elapsed":7845,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["import numpy as np\n","import codecs\n","import os\n","import random\n","import pandas\n","from keras import backend as K\n","from keras.models import Model\n","from keras.layers.embeddings import Embedding\n","from keras.layers import Input, Dense, Lambda, Permute, Dropout\n","from keras.layers import Conv2D, MaxPooling1D\n","from keras.optimizers import SGD\n","import ast\n","import re\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.model_selection import train_test_split\n","import gensim\n","from keras.models import load_model\n","from keras.callbacks import EarlyStopping, ModelCheckpoint"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"CJj759Rj6b3L","executionInfo":{"status":"ok","timestamp":1608953402913,"user_tz":-210,"elapsed":17447,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["limit_number = 750\n","data = pandas.read_csv('../Data/limited_to_'+str(limit_number)+'.csv',index_col=0,converters={'body': eval})\n","data = data.dropna().reset_index(drop=True)\n","X = data[\"body\"].values.tolist()\n","y = pandas.read_csv('../Data/limited_to_'+str(limit_number)+'.csv')\n","labels = []\n","tag=[]\n","for item in y['tag']:\n","  labels += [i for i in re.sub('\\\"|\\[|\\]|\\'| |=','',item.lower()).split(\",\") if i!='' and i!=' ']\n","  tag.append([i for i in re.sub('\\\"|\\[|\\]|\\'| |=','',item.lower()).split(\",\") if i!='' and i!=' '])\n","labels = list(set(labels))\n","mlb = MultiLabelBinarizer()\n","Y=mlb.fit_transform(tag)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vM997bpQcX9A","executionInfo":{"status":"ok","timestamp":1608953402915,"user_tz":-210,"elapsed":16081,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"e2ac16cf-feaa-4723-97b8-10333412743f"},"source":["len(labels)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["78"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"9_VUcunM6b3M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953402916,"user_tz":-210,"elapsed":15575,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"f507f506-73fc-48b1-99ca-9c2f74ccdcf3"},"source":["sentence_maxlen = max(map(len, (d for d in X)))\n","print('sentence maxlen', sentence_maxlen)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["sentence maxlen 300\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"W_7JIWCbF6GP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953403538,"user_tz":-210,"elapsed":15966,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"3db3ff40-4d51-41ed-9d1e-b6e365994094"},"source":["freq_dist = pandas.read_csv('../Data/FreqDist_sorted.csv',index_col=False)\n","vocab=[]\n","for item in freq_dist[\"word\"]:\n","  try:\n","    word=re.sub(r\"[\\u200c-\\u200f]\",\"\",item.replace(\" \",\"\"))\n","    vocab.append(word)\n","  except:\n","    pass\n","  \n","print(vocab[10])"],"execution_count":8,"outputs":[{"output_type":"stream","text":["زبان\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jo8Gh3Se4cDR","executionInfo":{"status":"ok","timestamp":1608953404445,"user_tz":-210,"elapsed":16612,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["vocab = sorted(vocab)\n","vocab_size = len(vocab)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvQ6Yn7r6b3N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953404446,"user_tz":-210,"elapsed":16222,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"f51b910c-c7b5-4cef-fc3e-096a060040b8"},"source":["print('vocab size', len(vocab))\n","w2i = {w:i for i,w in enumerate(vocab)}\n","# i2w = {i:w for i,w in enumerate(vocab)}\n","print(w2i[\"زبان\"])"],"execution_count":10,"outputs":[{"output_type":"stream","text":["vocab size 225345\n","129280\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"collapsed":true,"id":"-CWX1GRP6b3N","executionInfo":{"status":"ok","timestamp":1608953406497,"user_tz":-210,"elapsed":17824,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["def vectorize(data, sentence_maxlen, w2i):\n","    vec_data = []\n","    \n","    for d in data:\n","       \n","        vec = [w2i[w] for w in d if w in w2i]\n","        pad_len = max(0, sentence_maxlen - len(vec))\n","        vec += [0] * pad_len\n","        vec_data.append(vec)\n","        # print(d)\n","        \n","    vec_data = np.array(vec_data)\n","    \n","    return vec_data\n","\n","vecX = vectorize(X, sentence_maxlen, w2i)\n","vecY=Y"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rrx-u3vO6b3N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953406499,"user_tz":-210,"elapsed":16921,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"c70715d4-e19a-4f81-c2f2-a39a8a39423b"},"source":["X_train, X_test, y_train, y_test = train_test_split(vecX, vecY, test_size=0.2)\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25)\n","print('train: ', X_train.shape , '\\ntest: ', X_test.shape , '\\nval: ', X_val.shape ,\"\\ny_tain:\",y_train.shape )\n","# print(vecX[0])"],"execution_count":12,"outputs":[{"output_type":"stream","text":["train:  (12935, 300) \n","test:  (4312, 300) \n","val:  (4312, 300) \n","y_tain: (12935, 78)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2NN8pBPe6b3O","executionInfo":{"status":"ok","timestamp":1608953406500,"user_tz":-210,"elapsed":15902,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["embd_dim = 300\n"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bKcEzoCqCdfg"},"source":["# ***If the word2vec model is not generated before, we should run the next block.***"]},{"cell_type":"code","metadata":{"id":"0E91RDFOAsM-","executionInfo":{"status":"ok","timestamp":1608953406501,"user_tz":-210,"elapsed":14887,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["# embed_model = gensim.models.Word2Vec(X, size=embd_dim, window=5, min_count=5)\r\n","# embed_model.save('word2vec_model')"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hlk6Pf3XDY_K"},"source":["# ***Otherwise, we can run the next block.***"]},{"cell_type":"code","metadata":{"id":"ROzrPxYhAxL1","executionInfo":{"status":"ok","timestamp":1608953409972,"user_tz":-210,"elapsed":17956,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["embed_model=gensim.models.Word2Vec.load('word2vec_model')"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"mMysImM9Fd01","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953410791,"user_tz":-210,"elapsed":18600,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"2a8eb072-ea3a-4eb2-f168-421fd291de72"},"source":["word2vec_embd_w = np.zeros((vocab_size, embd_dim))\n","for word, i in w2i.items():\n","  if word in embed_model.wv.vocab:\n","        embedding_vector =embed_model[word]\n","  \n","        # words not found in embedding index will be all-zeros.\n","        word2vec_embd_w[i] = embedding_vector"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DeprecationWarning: Call to deprecated `__getitem__` (Method will be removed in 4.0.0, use self.wv.__getitem__() instead).\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"OKOLRwWv6b3O","executionInfo":{"status":"error","timestamp":1608953412332,"user_tz":-210,"elapsed":19951,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"265aa511-a730-4e9a-946c-e08dfbbaa647"},"source":["def Net(vocab_size, embd_size, sentence_maxlen, glove_embd_w):\n","    sentence = Input((sentence_maxlen,), name='SentenceInput')\n","    \n","    # embedding\n","    embd_layer = Embedding(input_dim=vocab_size, \n","                           output_dim=embd_size, \n","                           weights=[word2vec_embd_w], \n","                           trainable=False,\n","                           name='shared_embd')\n","    embd_sentence = embd_layer(sentence)\n","    embd_sentence = Permute((2,1))(embd_sentence)\n","    embd_sentence = Lambda(lambda x: K.expand_dims(x, -1))(embd_sentence)\n","    \n","    # cnn\n","\n","    cnn_1 = Conv2D(1,name='cnn_1', \n","                 kernel_size=(5, sentence_maxlen),\n","                 activation='relu')(embd_sentence)\n","\n","    cnn_2 =  Lambda(lambda x: K.sum(x, axis=3),name='cnn_2')(cnn_1)\n","    max_pool_1 = MaxPooling1D(3,name='max_pool_1')(cnn_2)\n","    # bn_1 = BatchNormalization(name='bn_1')(max_pool_1)\n","    cnn_3 = Lambda(lambda x: K.sum(x, axis=2),name='cnn_3')(max_pool_1)\n","    # bn_2 = BatchNormalization(name='bn_2')(cnn_3)\n","\n","    flatten = Flatten(name='flatten')(cnn_3)\n","    dense_1 = Dense(400,activation=\"relu\",name='dense_1')(flatten)\n","    dense_2 = Dense(300,activation=\"relu\",name='dense_2')(dense_1)\n","    dense_3 = Dense(200,activation=\"relu\",name='dense_3')(dense_2)\n","    dense_4 = Dense(len(labels),activation=\"sigmoid\",name='dense_4')(dense_3)\n","    out = Softmax(name='Soft_max_out')(dense_4)\n","    \n","    \n","\n","    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n","    model = Model(inputs=sentence, outputs=out, name='sentence_claccification')\n","    model.compile(optimizer=sgd, loss='binary_crossentropy', metrics=[\"accuracy\",\n","    \"categorical_accuracy\",]) \n","    return model\n","\n","\n","model = Net(vocab_size, embd_dim, sentence_maxlen,word2vec_embd_w)\n","print(model.summary())\n"],"execution_count":17,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-50d69c8d6601>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvocab_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0membd_dim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence_maxlen\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mword2vec_embd_w\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-50d69c8d6601>\u001b[0m in \u001b[0;36mNet\u001b[0;34m(vocab_size, embd_size, sentence_maxlen, glove_embd_w)\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;31m# bn_2 = BatchNormalization(name='bn_2')(cnn_3)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0mflatten\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'flatten'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcnn_3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m     \u001b[0mdense_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m400\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"relu\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'dense_1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mdense_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m300\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"relu\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'dense_2'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdense_1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Flatten' is not defined"]}]},{"cell_type":"code","metadata":{"id":"4ICvyzSPOycv"},"source":["# model.fit(X_train, y_train,\n","#             batch_size=32,\n","#             epochs=5,\n","#             validation_data=(X_val, y_val))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YezCDpzv6b3P","executionInfo":{"status":"ok","timestamp":1608904630865,"user_tz":-210,"elapsed":1171668,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"c93ef048-807e-4570-cf1d-e58079c7c693"},"source":["# model = Net(vocab_size, embd_dim, sentence_maxlen,word2vec_embd_w)\n","\n","es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5) # Model stop training after 50 epoch where validation loss didnt decrease\n","mc = ModelCheckpoint('best_cnn_4fc.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True) #You save model weight at the epoch where validation loss is minimal\n","model.fit(X_train, y_train, batch_size=32,epochs=20,verbose=1,validation_data=(X_val, y_val),callbacks=[es,mc])#you can run for 1000 epoch btw model will stop after 50 epoch without better validation loss\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","405/405 [==============================] - 57s 139ms/step - loss: 0.1156 - accuracy: 0.0102 - categorical_accuracy: 0.0102 - val_loss: 0.1130 - val_accuracy: 0.0141 - val_categorical_accuracy: 0.0141\n","\n","Epoch 00001: val_loss improved from inf to 0.11301, saving model to best_cnn_4fc.h5\n","Epoch 2/20\n","405/405 [==============================] - 55s 137ms/step - loss: 0.1145 - accuracy: 0.0107 - categorical_accuracy: 0.0107 - val_loss: 0.1129 - val_accuracy: 0.0141 - val_categorical_accuracy: 0.0141\n","\n","Epoch 00002: val_loss improved from 0.11301 to 0.11289, saving model to best_cnn_4fc.h5\n","Epoch 3/20\n","405/405 [==============================] - 57s 140ms/step - loss: 0.1146 - accuracy: 0.0117 - categorical_accuracy: 0.0117 - val_loss: 0.1127 - val_accuracy: 0.0135 - val_categorical_accuracy: 0.0135\n","\n","Epoch 00003: val_loss improved from 0.11289 to 0.11275, saving model to best_cnn_4fc.h5\n","Epoch 4/20\n","405/405 [==============================] - 56s 138ms/step - loss: 0.1143 - accuracy: 0.0097 - categorical_accuracy: 0.0097 - val_loss: 0.1126 - val_accuracy: 0.0132 - val_categorical_accuracy: 0.0132\n","\n","Epoch 00004: val_loss improved from 0.11275 to 0.11256, saving model to best_cnn_4fc.h5\n","Epoch 5/20\n","405/405 [==============================] - 57s 141ms/step - loss: 0.1147 - accuracy: 0.0096 - categorical_accuracy: 0.0096 - val_loss: 0.1123 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00005: val_loss improved from 0.11256 to 0.11225, saving model to best_cnn_4fc.h5\n","Epoch 6/20\n","405/405 [==============================] - 54s 134ms/step - loss: 0.1153 - accuracy: 0.0102 - categorical_accuracy: 0.0102 - val_loss: 0.1118 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00006: val_loss improved from 0.11225 to 0.11183, saving model to best_cnn_4fc.h5\n","Epoch 7/20\n","405/405 [==============================] - 54s 133ms/step - loss: 0.1136 - accuracy: 0.0106 - categorical_accuracy: 0.0106 - val_loss: 0.1113 - val_accuracy: 0.0130 - val_categorical_accuracy: 0.0130\n","\n","Epoch 00007: val_loss improved from 0.11183 to 0.11135, saving model to best_cnn_4fc.h5\n","Epoch 8/20\n","405/405 [==============================] - 55s 135ms/step - loss: 0.1141 - accuracy: 0.0096 - categorical_accuracy: 0.0096 - val_loss: 0.1109 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00008: val_loss improved from 0.11135 to 0.11088, saving model to best_cnn_4fc.h5\n","Epoch 9/20\n","405/405 [==============================] - 54s 133ms/step - loss: 0.1116 - accuracy: 0.0107 - categorical_accuracy: 0.0107 - val_loss: 0.1105 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00009: val_loss improved from 0.11088 to 0.11046, saving model to best_cnn_4fc.h5\n","Epoch 10/20\n","405/405 [==============================] - 55s 135ms/step - loss: 0.1127 - accuracy: 0.0089 - categorical_accuracy: 0.0089 - val_loss: 0.1101 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00010: val_loss improved from 0.11046 to 0.11011, saving model to best_cnn_4fc.h5\n","Epoch 11/20\n","405/405 [==============================] - 54s 134ms/step - loss: 0.1115 - accuracy: 0.0098 - categorical_accuracy: 0.0098 - val_loss: 0.1098 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00011: val_loss improved from 0.11011 to 0.10980, saving model to best_cnn_4fc.h5\n","Epoch 12/20\n","405/405 [==============================] - 54s 133ms/step - loss: 0.1107 - accuracy: 0.0102 - categorical_accuracy: 0.0102 - val_loss: 0.1095 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00012: val_loss improved from 0.10980 to 0.10946, saving model to best_cnn_4fc.h5\n","Epoch 13/20\n","405/405 [==============================] - 54s 133ms/step - loss: 0.1112 - accuracy: 0.0100 - categorical_accuracy: 0.0100 - val_loss: 0.1091 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00013: val_loss improved from 0.10946 to 0.10907, saving model to best_cnn_4fc.h5\n","Epoch 14/20\n","405/405 [==============================] - 54s 134ms/step - loss: 0.1118 - accuracy: 0.0088 - categorical_accuracy: 0.0088 - val_loss: 0.1086 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00014: val_loss improved from 0.10907 to 0.10865, saving model to best_cnn_4fc.h5\n","Epoch 15/20\n","405/405 [==============================] - 55s 135ms/step - loss: 0.1092 - accuracy: 0.0096 - categorical_accuracy: 0.0096 - val_loss: 0.1082 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00015: val_loss improved from 0.10865 to 0.10820, saving model to best_cnn_4fc.h5\n","Epoch 16/20\n","405/405 [==============================] - 55s 135ms/step - loss: 0.1108 - accuracy: 0.0094 - categorical_accuracy: 0.0094 - val_loss: 0.1077 - val_accuracy: 0.0128 - val_categorical_accuracy: 0.0128\n","\n","Epoch 00016: val_loss improved from 0.10820 to 0.10774, saving model to best_cnn_4fc.h5\n","Epoch 17/20\n","405/405 [==============================] - 54s 134ms/step - loss: 0.1114 - accuracy: 0.0101 - categorical_accuracy: 0.0101 - val_loss: 0.1073 - val_accuracy: 0.0130 - val_categorical_accuracy: 0.0130\n","\n","Epoch 00017: val_loss improved from 0.10774 to 0.10725, saving model to best_cnn_4fc.h5\n","Epoch 18/20\n","405/405 [==============================] - 55s 136ms/step - loss: 0.1085 - accuracy: 0.0087 - categorical_accuracy: 0.0087 - val_loss: 0.1068 - val_accuracy: 0.0130 - val_categorical_accuracy: 0.0130\n","\n","Epoch 00018: val_loss improved from 0.10725 to 0.10676, saving model to best_cnn_4fc.h5\n","Epoch 19/20\n","405/405 [==============================] - 54s 134ms/step - loss: 0.1103 - accuracy: 0.0102 - categorical_accuracy: 0.0102 - val_loss: 0.1063 - val_accuracy: 0.0130 - val_categorical_accuracy: 0.0130\n","\n","Epoch 00019: val_loss improved from 0.10676 to 0.10626, saving model to best_cnn_4fc.h5\n","Epoch 20/20\n","405/405 [==============================] - 55s 136ms/step - loss: 0.1080 - accuracy: 0.0088 - categorical_accuracy: 0.0088 - val_loss: 0.1058 - val_accuracy: 0.0130 - val_categorical_accuracy: 0.0130\n","\n","Epoch 00020: val_loss improved from 0.10626 to 0.10581, saving model to best_cnn_4fc.h5\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f1cafe228d0>"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"PuX32MgQFhO9","executionInfo":{"status":"ok","timestamp":1608953427697,"user_tz":-210,"elapsed":6551,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["# model.save('CNN_2_no_binary.h5')\n","\n","from keras.models import load_model\n","model = load_model('CNN_2_no_binary.h5')"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZewJ__l6lzrI"},"source":["Evaluation"]},{"cell_type":"code","metadata":{"id":"jefbnOe7lS73","executionInfo":{"status":"ok","timestamp":1608953434651,"user_tz":-210,"elapsed":5001,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["pred=model.predict(X_test)\r\n","# For evaluation: If the probability > 0.5 you can say that it belong to the class."],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"AYbSVxBdgSov","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953434652,"user_tz":-210,"elapsed":4992,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"dee2432e-4620-4aeb-f1c0-2e09aca2cd80"},"source":["print(pred[0])#example"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[0.00891698 0.00979597 0.00865234 0.00858508 0.01216903 0.00858476\n"," 0.00861608 0.00858577 0.00860617 0.00864381 0.0233189  0.00947236\n"," 0.00861769 0.00868051 0.00858477 0.01684724 0.00876226 0.02206947\n"," 0.02259556 0.00873951 0.01260837 0.01190028 0.00858474 0.02065245\n"," 0.00934172 0.02308717 0.00928295 0.00943884 0.00888762 0.009358\n"," 0.01175373 0.01756092 0.0216513  0.0233357  0.01098049 0.02270186\n"," 0.0120183  0.00985914 0.00901982 0.00859309 0.01979674 0.00875096\n"," 0.00858674 0.01914104 0.01093978 0.00858741 0.00858576 0.00992736\n"," 0.00955887 0.00894604 0.00858808 0.00858498 0.0086178  0.01125179\n"," 0.00959706 0.01899136 0.0209897  0.00915571 0.02319692 0.01829348\n"," 0.01900753 0.00859344 0.01453963 0.00867797 0.00873454 0.02006797\n"," 0.00858477 0.0103243  0.01525238 0.00959792 0.02189832 0.02314141\n"," 0.012448   0.00858718 0.00858501 0.02300325 0.0106986  0.0187095 ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"prtlfgCJgUYx","executionInfo":{"status":"ok","timestamp":1608953890747,"user_tz":-210,"elapsed":15507,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}}},"source":["y_pred=[]\n","for l in pred:\n","  temp=[]\n","  for value in l:\n","    if value>= np.mean(pred[0]) + .75*np.sqrt(np.var(pred[0])):\n","      temp.append(1)\n","    else:\n","      temp.append(0)\n","  y_pred.append(temp)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Q5MZOrmlozW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608953890748,"user_tz":-210,"elapsed":15262,"user":{"displayName":"zeinab taghavi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GheNU3ejtJBEFfDC_0W_JdLEuwkW7SKnnDuH80MRA=s64","userId":"07214630829740929140"}},"outputId":"f2aba7ee-7761-4a53-bdd4-f90b8761f1e7"},"source":["from sklearn.metrics import classification_report\r\n","\r\n","print(classification_report(y_test, y_pred))"],"execution_count":47,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.07      0.64      0.12       122\n","           1       0.06      0.64      0.12       139\n","           2       0.09      0.78      0.15       134\n","           3       0.00      0.00      0.00        16\n","           4       0.39      0.89      0.54        73\n","           5       0.00      0.00      0.00        10\n","           6       0.12      0.72      0.20       137\n","           7       0.00      0.00      0.00        37\n","           8       0.00      0.00      0.00        33\n","           9       0.07      0.42      0.12       121\n","          10       0.04      1.00      0.07       164\n","          11       0.21      0.62      0.31        65\n","          12       0.50      0.99      0.67       140\n","          13       0.00      0.00      0.00        18\n","          14       0.00      0.00      0.00        12\n","          15       0.05      0.80      0.10       138\n","          16       0.15      0.74      0.25       124\n","          17       0.13      0.92      0.23       156\n","          18       0.10      0.60      0.18       107\n","          19       0.07      0.10      0.08        63\n","          20       0.09      0.60      0.16       125\n","          21       0.13      0.62      0.21       125\n","          22       0.00      0.00      0.00        44\n","          23       0.04      0.90      0.08       153\n","          24       0.18      0.15      0.16        73\n","          25       0.08      0.79      0.15       146\n","          26       0.05      0.83      0.10       143\n","          27       0.09      0.81      0.16       134\n","          28       0.05      0.71      0.10       129\n","          29       0.12      0.63      0.21       134\n","          30       0.07      0.35      0.12        57\n","          31       0.08      0.29      0.12        82\n","          32       0.04      0.64      0.08       129\n","          33       0.03      1.00      0.06       135\n","          34       0.05      0.13      0.07        71\n","          35       0.03      1.00      0.06       134\n","          36       0.07      0.96      0.12       147\n","          37       0.51      0.80      0.63        76\n","          38       0.14      0.21      0.17        52\n","          39       0.00      0.00      0.00        31\n","          40       0.13      0.85      0.23       161\n","          41       0.10      0.56      0.17       113\n","          42       0.00      0.00      0.00        73\n","          43       0.05      0.83      0.09       139\n","          44       0.20      0.79      0.33       156\n","          45       0.00      0.00      0.00        18\n","          46       0.00      0.00      0.00        31\n","          47       0.08      0.87      0.14       130\n","          48       0.09      0.65      0.15       142\n","          49       0.21      0.53      0.30        60\n","          50       0.00      0.00      0.00        35\n","          51       0.00      0.00      0.00        22\n","          52       0.00      0.00      0.00        47\n","          53       0.11      0.37      0.17        97\n","          54       0.13      0.73      0.22       126\n","          55       0.03      0.03      0.03        35\n","          56       0.05      0.33      0.08        54\n","          57       0.33      0.57      0.42        40\n","          58       0.09      0.86      0.16       144\n","          59       0.05      0.71      0.09       137\n","          60       0.11      0.87      0.19       158\n","          61       0.00      0.00      0.00        47\n","          62       0.05      0.72      0.08       127\n","          63       0.24      0.84      0.37       172\n","          64       0.20      0.51      0.29        90\n","          65       0.11      0.59      0.18       143\n","          66       0.00      0.00      0.00        34\n","          67       0.03      0.19      0.05        99\n","          68       0.25      0.77      0.38       155\n","          69       0.06      0.69      0.11       134\n","          70       0.04      0.78      0.07       109\n","          71       0.09      0.85      0.16       144\n","          72       0.04      0.57      0.08       109\n","          73       0.00      0.00      0.00        35\n","          74       0.00      0.00      0.00        18\n","          75       0.04      0.99      0.07       148\n","          76       0.14      0.34      0.20        62\n","          77       0.07      0.74      0.13       118\n","\n","   micro avg       0.07      0.66      0.13      7591\n","   macro avg       0.09      0.51      0.14      7591\n","weighted avg       0.10      0.66      0.16      7591\n"," samples avg       0.07      0.68      0.12      7591\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"f6LyetR4LvrB"},"source":[""],"execution_count":null,"outputs":[]}]}